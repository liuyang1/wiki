= Performance =

What's real meaning behind of performance?

Time. This affect user's visible feeling.

What's real meaning for specific layer's performance?

Do same job, it consume how much low layer's cycle.

For example, we have one SoC. It have two adders. 我们的编程语言，转换为具体这个CPU的执行指令，需要多少。

影响因素
- 算法
- 编译器本身（映射的效率等）
- 读写的效率等，cache的效率等
- 硬件本身的效率

一般传统的分析，着重在算法
常见的优化手段，则在于第二点。也就是通过各种库和编译器选项，来加速。
第三点，则在于pipeline分析
第四点，则在于硬件本身的优化（不在于软件，所以我们SW engineer一般不会涉及这部分）

PPA: performance, power, area

area

这个指标化最常见的就是芯片制程。换言之，晶体管密度

= Performance based on processor-archtecture =

缓存命中（考虑cache line size）
指令预测（likely、unlikely）
数据预取 prefetch
数据对齐 （和缓存也有关系）
内存copy优化 （利用外部dma）
ddr访问延迟
硬件内存管理优化
指令优化等

== 指令预测的机制 ==
branch target buffer（最近几次的跳转结果

数据预取，

缓存行对其的方式来保证数据对齐

ecc，也是安装带宽对齐的。合理的位置和数据结构大小，可以减少内存访问

ddr的性能参数（行选通、数据延迟、预充电）
ddr地址的粒度，列、行、页
不同页，那么需要预充电、行选通、数据延迟，3个时间之和
同页不同行的访问，需要行选通、数据延迟
同页同行不同列连续访问，需要数据延迟

工具，kprofile、oprofile

一个非常好的例子

https://lwn.net/Articles/255364/

= flame graph =

0. sampling callstack, for example 997Hz (largest prime number less than 1k, why this? To avoid aliasing issue if equal to 1k)
1. accumulate same callstack, sort with lexicographic order.
