== execve ==
`int execve(const char *path, char *const argv[], char *const envp[]);`

`path` should contain path and executable file name.

{{{
execve("/bin/ls", pointer to {"ls", "-l", NULL}, NULL);
}}}

=== execvp ===
search executable under `PATH` env var

= pipe =

一，管道读写规则
当没有数据可读时

- O_NONBLOCK disable：read调用阻塞，即进程暂停执行，一直等到有数据来到为止。
- O_NONBLOCK enable：read调用返回-1，errno值为EAGAIN。

当管道满的时候

- O_NONBLOCK disable： write调用阻塞，直到有进程读走数据
- O_NONBLOCK enable：调用返回-1，errno值为EAGAIN

如果所有管道写端对应的文件描述符被关闭，则read返回0

如果所有管道读端对应的文件描述符被关闭，则write操作会产生信号SIGPIPE

当要写入的数据量不大于PIPE_BUF时，linux将保证写入的原子性。

当要写入的数据量大于PIPE_BUF时，linux将不再保证写入的原子性。

= sync =
== semaphore ==
=== named semaphore ===
- sem_open
- sem_close
- sem_unlink

=== unmaed semaphore ===
- sem_init
- sem_destory

=== operation ===
- sem_getvalue
- sem_post
- sem_wait
- sem_trywait
- sem_timedwait

== cond ==
- pthread_cond_destroy
- pthread_cond_init

- pthread_cond_wait
- pthread_cond_timedwait
- pthread_cond_signal
- pthread_cond_broadcast

cond var have a lot of potential issue:

- lost signal if no thread is waiting.
- fake signal
- thread switch multiple times, performance bad

== mutex ==
- pthread_mutex_init
- pthread_mutex_destory

- pthread_mutex_lock
- pthread_mutex_trylock
- pthread_mutex_timedlock
- pthread_mutex_unlock

== rwlock ==
prefix with `pthread_rwlock_`
- init
- destroy

- rdlock
- tryrdlock
- timedrdlock
- wrlock
- trywrlock
- timedwrlock
- unlock

== mman ==

- getpagesize
- mmap
- munmap
- msync
    return `ENOMEM`, memory was not mapped

- shm_open

mmap style

- MAP_SHARED to save memory for different process
- avoid copy
- faster load (amortized cost, when load model AGAIN until memory pressure caused your file cache to be evicted)

== futex ==
TODO:
