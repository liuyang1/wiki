== module ==
`init_module`/`finit_module` to load a kernal module

- load an ELF image into kernel space,
- performs any necessary symobl relocations,
- init module params to values providied by the caller
- run modules' init function

=== insmod ===
=== rmmod ===
=== lsmod ===
Module Size 'Used by'
=== modprobe ===
=== modinfo ===

== panic ==
print_tainted - return a string to represent the kernel taint state.

- 'O' - Out-of-tree module has been loaded.
- 'D' - Kernel has oopsed before
- 'W' - Taint on warning.
- 'P' - Proprietary module has been loaded.

- 'F' - Module has been forcibly loaded.
- 'S' - SMP with CPUs not designed for SMP.
- 'R' - User forced a module unload.
- 'M' - System experienced a machine check exception.
- 'B' - System has hit bad_page.
- 'U' - Userspace-defined naughtiness.
- 'A' - ACPI table overridden.
- 'C' - modules from drivers/staging are loaded.
- 'I' - Working around severe firmware bug.
- 'E' - Unsigned module has been loaded.

The string is overwritten by the next call to print_tainted().

=== trigger crash ===
`echo c > /proc/sysrq-trigger`

system will directly panic

=== decodecode ===
script to help debug

find "Code :" string from STDIN, then disassmble it.

== dtb ==
device tree blob

description of hardware.

bootloader load two binaries:
# kernel image
# DTB

DTB is compiled from dts file (device tree source).

bootloader pass DTB address through *r2* register.

=== DTS syntax ===

=== compile ===
- DTS file, board-level definitions
- DTSI file, SoC-level definitions
DTS file could merge / overlay the tree of the including file over the tree of the
included file

DTS go through C preprocessor, use `#include` style.

scripts/dtc (device tree compiler)

DTB, compiled file.

== kworker ==

"kworker" is a placeholder process for kernel worker threads, which perform
most of the actual processing for the kernel, especially in cases where there
are interrupts, timers, I/O, etc.


```
echo l > /proc/sysrq-trigger
dmesg | tail -n 100
```

to find out what use so may CPU.

== IDR: integer ID management ==
idr 是小整数ID管理的库

使用稀疏数组映射整数到任意指针类型

> 和我们实现的idmap是类似的东西

- void idr_init(struct idr *idp);
- int idr_pre_get(struct idr *idp, unsigned int gfp_mask);
    - 准备工作可以在没有锁的情况下进行，而真正的工作需要在锁的保护下
- int idr_get_new(struct idr *idp, void *ptr, int *id);
- int idr_get_new_above(struct idr *idp, void *ptr, int start_id, int *id);
- void *idr_find(struct idr *idp, int id);
- void idr_remove(struct idr *idp, int id);

== spin lock自旋锁 ==
spin lock

其实关键就是try-again的机制

 {{{
  again:
	if (idr_pre_get(&my_idr, GFP_KERNEL) == 0) {
		/* No memory, give up entirely */
	}
	spin_lock(&my_lock);
	result = idr_get_new(&my_idr, &target, &id);
	if (result == -EAGAIN) {
		sigh();
		spin_unlock(&my_lock);
		goto again;
	}

}}}

== IO ==
ref: https://blog.csdn.net/KingCat666/article/details/77689274

多路复用
=== sync IO/select ===
`int select (int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);`

select 监视读写异常三个组的文件描述符集合。直到有一个描述符就绪，或者超时

出来后的结果，通过FD_ISSET宏之类的判断其mask的结果

缺陷：FD的个数有限制，并且复杂度O(Num(fd))

=== async IO/poll ===

`int poll (struct pollfd *fds, unsigned int nfds, int timeout);`

- 使用链表
- 水平触发

=== epoll ===

{{{
int epoll_create(int size)；// 创建一个 epoll 的句柄，size 用来告诉内核这个监听的数目一共有多大
int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);
}}}

- 减小需要复制到内核的内容
- mmap
- 边沿触发

= printk format in kernel =

kernel doesn't support %n, floating point formats ("%e, %f, %g, %a")

pointer

%p hashed pointer
%pF symbols/function pointer (recommended)
%pSR symbol with translation

%px unmodified address

https://www.kernel.org/doc/Documentation/printk-formats.txt

= module probe type =

ASYNC way, to async load "slow" module

IPC project loading module is too slow, they may could try with "ASYNC" probe.
