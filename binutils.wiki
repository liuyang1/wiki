== ld ==
linker

one alias collect or collect2.

normally, DONOT using ld command directly, as gcc will hidden so many param of
ld.

* --entry main              spec entry is main
* -T, --scriptfile          add spec file, which overlay system ld script, but
could accumlate.

== gold ==
Google's new faster linker.

=== issue ===
==== how libraries are used ====
* starting up an ELF binary executable automatically causes the program loader
to be loaded and run. on Linux, linker will `/lib/ld-linux.so.X`

- the list of directories stored in the file `/etc/ld.so.conf` will search.
(using _include_ will include other file, generic is `/etc/ld.so.conf.d/*.conf`)

* if only override a few functions in a library, but keep the rest of the
library, using `/etc/ld.so.preload`, add override libraries(*.o). these
`preloading` libraries will tack precedence over the standard sets.

NOTE:
This feature is typically ONLY used for emergency patches.

* a caching arrangement for these libraries. `ldconfig` by default reads in the
file /etc/ld.so.conf, set up the symbolic links in the dynamic link directires.
write a cache to `/etc/ld.so.cache` for other programs.

must run ldconfig, under conditions listed below.
- add a DDL
- remove a DDL
- DDL directories changes

package manager normally run ldconfig after install or uninstall package.

On start-up, dynamic loader actually uses the file /etc/ld.so.cache, and loads
the libraries it needs.

==== ENV var ====
- `LD_LIBRARY_PATH` a colon-seperated set of directories search first.
- `LD_PRELOAD` lists shared libraries with function that override the std set.
just as ld.so.preload file.

NOTE:
these are implemented by /lib/ld-linux.so
| generic UNIX | LD_PRELOAD |
| HP-UX        | SHLIB_PATH |
| AIX          | LIBPATH    |

==== preloading ====
using LD_PRELOAD, for override binary executable logic, or for reverse engineer-
ing a binary blob.

but only dynamic load symbol could preload, symbols static linked or in itself
could not 'preload'

`cwrap` is a tool use for debug using preloading.
=== ldd ===
print shared libraries deps as `linking order`

== as ==
assembler

== addr2line ==

addr2line -f [PC pinter] -e [filename]
== ar ==
creating, modifying, extracting from archives.

- ar x      extracting from archives.
- ar -cr libwav.a wav.o

- if linking with different format, it show error msg:
"... in archive is not an object"


== c++filt ==
filter to demangle encode C++/Java symbols

{{{
c++filt _Z23CreateObject_PByteArrayP7_JNIEnvP8_jobjectP11_jbyteArray
CreateObject_PByteArray(_JNIEnv*, _jobject*, _jbyteArray*)
}}}

== ddltool ==
creates files for building and uinsg DDLs.

== gold ==
a new, faster ELF only linker. beta.

== gprof ==
display profiling information
gprof,profile工具,非常有用.值得学习.

之间测试用过,现在又忘了.

# 编译时候加入-pg参数,以支持profile.
# 直接运行,运行的结果有gmon.out文件
# gprof [exename] gmon.out -p
    - 输出运行时间(注意,没有使用-pg进行编译的,这里不会有输出)
# gprof [exename] gmon.out -q
    - c输出,调用逻辑层级

*但是,gprof对于多线程程序的调试,支持比较麻烦,好像不是很好.*
=== __gnu_mcount_nc ===
When compile with GCC and passing -pg flags, compiler inserts a call to the
function __gnu_mcount_nc at the start of every function. Normally you link with
-pg, the implementation of this function is linked into your program or shared
library.

The *Android* platform doesn't provide an implenation of __gnu_mcount_nc, and
it also lacks the C library calls necessary for profiling.

This library implements __gnu_mcount_nc in a few lines of thumb code that
extract the required function address from the stack and call c C profiling
function.

The C profiling code is derived from gprof, so this library has to be licenced
GPLv2+.

so for Android Env, need external profiler.
[[https://github.com/richq/android-ndk-profiler|github]]
=== ARM profiling impl ===
compiler insert a call to __gnu_mcount_nc into every function prolugue.

must impl of __gnu_mcount_nc.

* on exit, pop the top value from *stack*, and place it in the *lr* register.
*sp* should be adjusted accoridingly.
{{{
    .globl __gnu_mcount_nc
    .type __gnu_mcount_nc, %function
__gnu_mcount_nc:
    mov ip, lr
    pop { lr }
    bx ip
}}}
* preserve all other register state except for *r12* and the *CPSR* condition
code bits. In particular all coprocessor state and register *r0* ~ *r3* must be
preserved.
* record and count all occurrrences of the function calls in the program.
(on entry to __gnu_mcount_nc)
- caller <- the *lr* value stored on the top of the stack
- callee <- the current value of *lr* register.
* arrange for the data to be saved to a file name *gmon.out* when program exit.
(via atexit)
== nlmconv ==
converts object code into an NLM.

== nm ==
lists symbols form objects files

- U         *undefined*
- u         unique global symbol


== objcopy ==
copies and translates object files.

- --add-section sectionname=filename
    add a new section while copying the file.

== objdump ==
display information from object files.
- -S        source
- -D        disassemble-all
- -s/--full-contents
    display the full contents of any sections requested.
    default all non-empty sections are displayed.
- -j section/--section=section
    display information only for section name.
- -h --headers
- -x --all-headers
- -f --file-headers

== ranlib ==
generates an index to the contents of an archive.

== readelf ==
display information from any ELF format object file.

- -a all
- -n --notes
    display content of NOTE segments and/or sections, if any

== size ==
list the section size of an object or an archive file.

== strings ==
lists printable strings from files.

== strip ==
discards symbols

== windmc ==
a Windows compatible message compiler.

== windres ==
a compiler for Window resources files.

== gcov ==
coverage test tool

# using gcc with -fprofile-arcs -ftest-coverage
# run it, get *.gcda file
# gcov [option] sourcefilename, generate sourcefilename.gcov

based on sourcefilename.gcov, get coverage test info

=== option ===
# -a, --all-blocks (otherwise, only output "main" block info)
# -b, --branch-probabilities
# -c, --branch-counts (default on)
