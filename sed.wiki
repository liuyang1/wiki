= sed =

== sed command line options ==
- -i[SUFFIX] --in-plane[=SUFFIX]        edit files in places(make backup if
   SUFFIX supplied)
- -e script, --expression=script        add script to command to be executed

== sed commands ==
- i \           insert text, which has each embedded newline preceded by a
backslash.
- s/.../.../    substitute
- D             delete

== sed pattern flags ==
- g             glboal, not only first match
- I             ignore case
- p             print
- w filename    write to file

ref: https://www.grymoire.com/Unix/Sed.html

{{{
REMIND: sed -i [command line options] "[sed commands]/XXXXX/YYYYY/[sed pattern flags]" [file]
}}}

= Example =
== add content to header of file ==
`sed -i -e '1iHere is my new top line\' [filename]`

== 替换 ==
"s/abc//g"  替换全文
"10,12s/abc//"  替换部分

"/abc/d     删除该部分,不会替换保留空行

== output tenth line ==
`sed -n 10p [FileName]`
== multiple file replace ==
{{{
sed -i "s/oldstring/newstring/g" `grep oldstring -rl /path/`
}}}

== raw string ==
when try to replace some string with backslashes, maybe want to use escape
char.

Actually, use a different symbol after the s command that doesn't appear in
the text.

for example, use %, then we get.

sed 's%XXX%YYY%g'

just like /.

NOTE:
when use for replace which contain a lost "/", such like path name, it's so
useful.

== using & as the matched string ==

{{{
echo "123 abc" | sed 's/[0-9]*/& &/'
}}}

if will matched "123", and replace it with "123 123" as & is represented as "&"

ref: http://www.grymoire.com/Unix/Sed.html#uh-3


=== add spdx license to file header ===

sed -i -E -f spdx.sed *
