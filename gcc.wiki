= GCC =
ref: https://gcc.gnu.org/onlinedocs/gcc/index.html#Top

== command options ==


=== options for directory search ===
ref: https://gcc.gnu.org/onlinedocs/gcc/Directory-Options.html#Directory-Options

- -L [linker dir]
- --sysroot=[system root]
    for corss compile

=== code generator option ===
ref: https://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html#Code-Gen-Options

- -fpic

pic:: psition-independent code (PIC)
GOT:: global offset table

    - generate PIC for used a shared library if supported for target machine.
    - such code access all constant address through GOT(global offset table).
    - dynamic loader resolve GOT when the program starts.
    - If GOT size exceed the machine's limit, will get a error messsage. Maybe
    Need use `-fPIC` under this case.
        - x86 have no such limit.

- -fPIC

    - chosse PIC code if supported; if not, fallback to normal mode.

- -fPIE -fpie

    - like PIC, but PIC only can be linked to executables.

=== link options ===
ref: https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html#Link-Options

- -pie

Produce a dynamically linked position independent executable on targets that
support it.

need `-fPIE` or `-fpie` for compiling process

= rarely std =
== multi-char const ==
using for init a INT var with multi-char,such as:

int v = 'ab';

this will cause a warning.

instead of this:

int v = '\x61\x62';

this compiles without warning, but warning when get '-pedantic'.

=== using as enum ===
when use as enum, will clearly and short code.
{{{
switch (tag) {
    case 'TAG1':...;
    case 'TAG2':...;
}
}}}
but this is so tricky, really not recommend to use this feature.
=== using as meta info ===
in mp4 box type, this will easily encode as
`int fytp = 'fytp';`
=== problems ===
# endian-ness
# incomplete multi-char and padding
different compiler will impl different style.

so not portable.
= extend =
struct init, as . style.

= proection for hacking =
== ASLR ==
TODO:
== stack protector ==
- -fstack-protector         only for func using char array
- -fstack-protector-all     for all func
- -fno-stack-protector
== executable space protection ==
TODO:
ref: https://en.wikipedia.org/wiki/Executable_space_protection#Android

== others ==
* -v                        verbose output for parameter details

= gcc =
== option ==
* m32,m64                   spec for 32bit or 64bit code
* -E                        preprocess only
* -e/--entry _ENTRY_        self define entry function

== preproces step ==

- use '-E' option to only do preprocess step.
- preprocess step include all header, and extend all macros.

=== preprocess option ===
ref: https://gcc.gnu.org/onlinedocs/gcc-5.2.0/gcc/Preprocessor-Options.html

- -D name
- -D name=definition
- -U name               undefine macro
- -I [include dir]
- -include [file]       auto include one header files
- -o                    output filename
=== warning of option ===
- -Wall
- -Werror

=== system macro ===
ref: https://gcc.gnu.org/onlinedocs/cpp/Standard-Predefined-Macros.html

- __FILE__

This macro expands to the name of the current input file, in the form of a C
string constant. This is the path by which the preprocessor opened the file,
       not the short name specified in ‘#include’ or as the input file name
       argument. For example, "/usr/local/include/myheader.h" is a possible
       expansion of this macro.

This is absolute path of source file, or relative path of source file. Both
are possible. It is determined by argument of the gcc command.

The string store at read-only section.

- __func__
- __line__

- assert

assert macro expand to '__assert2' (on Android platform).

it use __FILE__, __LINE__, __func__


=== debug option ===
- -g
- -Og optimize debug experience.

=== link option ===
- -lLIBNAME

==== short-enum ====
 It means that enums are just as big as they need to be, depending on the
 range of enumeration values. So short enums can be anything from 8 to 32 bits
 in size (maybe even 64 bits?) -- there's no way to know without knowing how
 the enum was defined.

 Check compiling result:
{{{
readelf -a [ELF file] | grep enum
}}}
== 使用ccache加速 ==
使用ccache gcc或者ccache g++,可以复用缓存的文件,这样加快编译速度.

相比与一般的文件,仅仅保存为.o文件,而这个可以暂存头文件的编译结果,等等.

同时可以使用ccache将缓存文件定位到tmpfs中,这样加快编译速度,而且不消耗硬盘.

== distcc ==
- run it only need under normal user, not root.
- on server, run `distccd --daemon --allow 10.0.0.0/8`
- export *DISTCC_HOST*="_IP_ ..." to ENV, and wrap toolchain with distcc, will
run it background automatically.

== warning ==
=== strict-aliasing ===
gcc 从2到3引进的

这一特性,不允许一个内存地址表示为两种指针,如果非要如此做,可以通过union实现.

这样的目的,是为了代码优化.可以使用-Wno-stict-aliasing来去除这个警告(实际仍会采用这个优化)

== circular dependency ==
- --start-group
- --end-group

We also could refine our code to avoid this kind of problem. For example:
observer mode.

libA depend on libB. However, libB need use one function in libA.

- obersever(libA) register function pointer to libB.
- libB call the function pointer when need.

so libB don't need know the function when compile, but just know it when
runtime.

`-Wl,--no-undefined`, check symbol when compiling, if no undefined reference
symbol, then it fail.

This make extra checking when link.
== extension ==
ref: [[https://gcc.gnu.org/onlinedocs/gcc/C-Extensions.html]]

== multilib ==
`-m32`

== std ==

- c99
- gnu99     c99, + gcc extension

== attribute ==
- `__attribute__((warn_unused_result))[[`]]

== LD option ==
ftp://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_node/ld_3.html

- --whole-archive
For each archive mentioned on the command line after the --whole-archive option,
    include every object file in the archive in the link,
    rather than searching the archive for the required object files.

This is normally used to turn an archive file into a shared library,
     forcing every object to be included in the resulting shared library.
     This option may be used more than once.

Linux 5.4 + gcc 9.4 have stack protection (compared with Linux 4.4 gcc 4.8.4)

so we prefer to use Linux5.4

Apple clang 14.0 doesn't have stack protection (and valgrind have false alarm on memory leaking)
