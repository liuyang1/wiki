- even or odd
`x & 1 == 0`

- check if n-th bit is set
`x & (1 << n)`

- set n-th bit
`x = x | (1 << n)`

- unset n-th bit
`x = x & ~(1 << n)`

- toggle n-th bit
`x = x ^ (1 << n)`

- turn off rightmost 1-bit
`x = x & (x - 1)`

So determining if an integer is a power of 2
`(x & (x - 1)) == 0`

if consider 0 as 2's power
`v && !(v & (v - 1))`
`#define IS_POWER_OF_TWO(x) (((x) != 0) && (((x) & (~(x) + 1)) == (x)))`

counting bits set

{{{
unsigned int v, c;
for (c = 0; v; c++) {
    v &= v - 1; // clear least significant bit set(rightmost bit)
}
}}}

popcount

> KEY skill v && !(v  v && !(v & (v - 1));& (v - 1));

  a b c d     0 a b c     0 b 0 d
& 0 1 0 1   & 0 1 0 1     0 a 0 c
---------   ---------    ---------
  0 b 0 d  +  0 a 0 c  = (a+b) (c+d)

    这个计算方法，重点是将啰嗦的32更多的op，可以放在更少次数操作完成

- isolate rightmost 1-bit
`x = x & (-x)`

- right propagate rightmost 1-bit
`x = x | (x - 1)`

- isolate right most 0-bit
`x = ~x & (x + 1)`

- turn on right most 0-bit
`x = x | (x + 1)`

- isolate leftmost 1-bit
`x ^= x >> 1`

== swap ==
- sub and add
{{{
#define SWAP(a, b) ((&(a) == &(b)) || \
    (((a) -= (b)), ((b) += (a)), ((a) = (b) - (a))))
}}}

- xor
`#define SWAP(a, b) ((a) ^= (b)), ((b) ^= (a)), ((a) ^= (b)))`

xor more simple version

{{{
void swap(int *a, int *b) {
    if (a != b) {
        *a ^= *b ^= *a ^= *b;
    }
}}}

== sign ==
=== -1, 0, +1 ===
`sign = (v > 0) - (v < 0)`

== roundup / rounddown==
{{{
/* Round up the even multiple of size, size has to be a multiple of 2 */
#ifndef ROUNDUP
#define ROUNDUP(v, size) (((v) + ((size) - 1)) & ~((size) - 1))
#endif

/* Round down the even multiple of size, size has to be a multiple of 2 */
#ifndef ROUNDDOWN
#define ROUNDDOWN(v, size) ((v) & ~((size) - 1))
#endif
}}}

== round up to next highest power of 2 ==
{{{
int roundup(int v) {
    v--;
    v |= v >> 1;
    v |= v >> 2;
    v |= v >> 4;
    v |= v >> 8;
    v |= v >> 16;
    v++;
    return v;
}
}}}
