= shell script programming =

== bash basic ==
NOTE:
shell not have type system.

== syntax ==
in \'\' even ??
== logic ==
=== topic ===
==== test comand ====
*if/then*, construct test whether the *exit status* of commands.

left bracket special char [, it's a synonym for *test* command.
*test* command is a builtin.

{{{
if [ -d "$dir" ]; then
    echo "do something when exist dir"
fi
if [ ! \( -d "$dir" \) ]; then
    echo "do something when not exist dir"
fi
if [[ !  -d "$dir"  ]]; then
    echo "do something when not exist dir"
fi
if [[ -f "$file0" && -f "$file1" ]]; then
    echo "do something when exist the 2 files"
fi
}}}

compare operator must escape using such as: `\<` or `\>`

==== extended test command ====

bash introduced the "\[\[  \]\]", _extended test command_.
which performs comparisons, such as &&, || and etc.
"\[\[" "]]" is keyword, `NOT` a command.

*NOT* support for dash.

No filename expansion or word spliting takes place between \[\[ and ]].
but there is paramter expanison and command substitution.

=== logic of logic ===
* !     negtive
- !expression
- expr1 -a expr2 AND
- expr1 -o expr2 OR
- (expr)    等同与expr
- -a的优先级比-o高
=== logic about file ===
* -d    dir exist?
* -f    file exist? 文件存在且为常规文件, cannot check device file
* -L    link exist?
- -b 文件存在且为块特殊文件
- -c 文件存在且为字符特殊文件
- -h 文件存在,并且为软连接
- -L 文件存在,并且是软连接
- -k 文件存在,并且stickly bit设置了
- -p 文件若是命名管道
- -s 文件存在,并且大小不是0
- -t file_descriptor 文件的文件描述符是打开的,并且关联到终端
- -e 文件存在(无视类型)
- -S 文件存在,并且是socket

* -r    read?  文件存在,并且可读
* -w    write?
* -x    executable?

- -g 文件存在,并且设置了组ID标志
- -u 文件存在,并且设置了用户ID标志
- -O 文件存在,并且所有者是当前进程的所有者
- -G 文件存在,并且所有者是当前进程所有者所在的组

* -nt   compare access time with two files
- file1 -nt file2 文件1,2存在,并且file1比file2新
- file1 -ot file2 文件1,2存在,并且file1比file2旧
- file1 -ef file2 文件1,2存在,并且指向相同的文件
=== logic about string ===
* =     equal?
* ==    equal?, synonym for =
* !=    not equal?
- s1 = s2 如果字符串s1,2是identical
- s1 != s2 如果字符串s1,s2不是identical
- s1 < s2 字典序比较
- s1 > s2 字典序比较
* -n    is null? or is not init?
            string 字符串长度不是0
* -z    var exist?
            string is null, that is has zero length
            string 字符串长度为0
- string 如果字符串不是非空字符串

string with wildcard, using start symbol.

$abc == *abc*

=== logic about number ===
* -eq   equal?
* -gt   greater than
* -lt   less than
- n1 -ne n2
- n1 -ge n2
- n1 -le n2

=== logic about number in double parentheses ===
- <
- <=
- >
- >=

== assign ==
directly assign
V=val

=== read ===
read -p "prompt message" val
== array ==
* define
arr[0]=1
arr[1]=2

bash::
arr=(1 2)
arr=(1, 2)

arr=("abc def")

will define a array which first element is "abc", next is "def"
NOTE:
this works in sh, bash, but maybe incompatible.
* access
${array_name[index]}

access all items
${array_name[@]}
${array_name[*]}

* loop on array
for a in ${array[@]}
do
    ...
done

* loop on array with index
{{{
for (( i = 0 ; i < ${#names[@]} ; i++ )) do
    echo ${names[$i]}
done
}}}
* copy
need extra parens
`Linux=("${Unix[@]}")`

== map ==
only support at bash 4.0+, ksh and zsh.

{{{
declare -A newmap
# typeset -A newmap
newmap[name]="liuyang"
newmap[what]="value"
echo ${newmap[name]}
}}}

more details check test code

=== more bash options ===
* -v                verbose
* -u/-o nounset     unset var, will quit
* -e/-o errexit     exit when any command return false
but now you can judge on $?, will have to use && or || to combine command
* -o pipefall       fail when one of pipe fall (default as last command)
* -x                output detail
reverse operation +v or +u ...

example::
:script:
set -v on

:cmd:
bash -v
==== add lineno output in bash script ====
*NOT* support for dash.

{{{
PS4=':${LINENO}+'
set -x
}}}
=== trap ===
trap for clean state, when script have some exceptional condition.

trap command signal [signal ...]

* INT   Interrupt, Ctrl-C
* TERM  Terminate, kill
* EXIT  exit, when script exit, send this signal

XXX:
trap will continue run command which after it.
so remember add a "exit" in trap command.
this is like case: break in C.
== args ==
- $1,$2表示第一个,第2个参数.
- $#,表示参数的个数
- $$ 本程序的PID
- $* all args in one string
- $! 上一个命令的PID
- $? 上一个命令或者函数的返回值
- $@ every param in array
- $- option for current shell

== getopts ==
参数解析
bash internal

== getopt ==
executable program

== judge and branch ==

=== case ===
{{{
    case $val in
        [0]* ) ...break;;
        [1]* ) ...break;;
        * ) ...;;
    esca
}}}
== loop ==
=== for ===
{{{
for i in $.jpg; do
    echo $i;
done
}}}
=== while ===
=== until ===
{{{
    until command ; do
        do sth...
    done
}}}
== fucntion ==
=== grammer ===
{{{
FUNCNAME() {
    FUNCBODY
}

# call func
FUNCNAME
}}}
注意::
函数名称后面,不要添加小括号.这样会引起shell子进程

sh

FuncName(){
    body
}

bash

function FuncName(){
    body
}
and compatable with sh style, but XXX: sh not compatable with bash style

=== return value ===
# return expression
only return number, like other programing language.

Using $?, to access last command exit value

0, OK, success.
Other value, some error happend

{{{
if mytest args; then
    dosth
fi
}}}
good to use as conditional

# change global or environment Var to return value

but last 2 method won't work when run in subprocess,
as not return value for subprocess,
and child-process cannot modify parent-process env-var

# using stdout to return val,
`ret=$(func param1 prarm2)`

not output anything, will mix stdout

# using eval functional style return
{{{
    function pass_back_a_string() {
        eval "$1='a test str'"
    }
    pass_back_a_string return_var
    echo $return=var
}}}

this's fantastic. even return_var is local var, this style could pass return
value to it.
== string operation ==
=== judge or get string var value ===
* ${var}            var value, same with var
* ${var-DEFAULT}    if var not exist, return default.
* ${var:-DEFAULT}   if var not exist or is blank string, return default.
* ${var=DEFAULT}    if var not exist, setting its value to DEFAULT
* ${var:=DEFAULT}   if var not exist or is blank string, setting its value to
DEFAULT
* ${var+OTHER}      if var exist, then return OTHER, else return blank string.
* ${var:+OTHER}     if var setting, ...
* ${var?ERR_MSG}    if var not exist, then print ERR_MSG
* ${var:?ERR_MSG}   if var not setting, ...
* ${!varprefix*}    match all var which startswith varprefix (only return var
name)
* ${!varprefix@}    lbid

=== string operation ===
* ${#string}        length of str
* ${str:pos}        substr from pos
* ${str:pos:len}    substr from pos and length is len
* ${str#sub}        from head, delete shortest matched substr
* ${str##sub}       from head, delete longest matched substr
* ${str%sub}        from tail, delete shortest matched substr
* ${str%%sub}       from tail, delete longest matched substr
* ${str/sub/rep}    replace first sub to rep
* ${str//sub/rep}   replace all sub to rep
* ${str/#sub/rep}   if str has sub as its prefix, then replace rep to sub
* ${str/%sub/rep}   if str has sub as its suffix, then replace rep to sub

all sub could be a Regular Expression.

`${var##*/}`        var is path, delete all dirname, get basename
`${var%/*}`       var is path, delete basename, get dirname

- ${#string}        string的长度
- ${string:pos}     string从pos位置之后的内容
- ${string:pos:len} string从pos开始,len长度
- ${string#substr}  从string开始,删除最短匹配substr的子串
- ${string##substr} 从string开始,删除最长匹配substr的子串
- ${string%substr}  从string结尾,删除最短匹配substr的子串
- ${string%%substr} 从string结尾,删除最长匹配substr的子串
- ${string/sub/rep} 使用rep替代第一个sub
- ${string//sub/rep}    使用rep替代所有的sub
- ${string/#sub/rep}    使用string前缀匹配sub,那么就用rep,替代所有的sub
- ${string/%sub/rep}    使用string后缀匹配sub,那么就有rep,替代所有的sub

=== pratice ===
midffix libabc_def.ta -> def

{{{
    suffix="${f#*_}"
    mid="${suffix%%.*}"
}}}

get prefix 1.ft -> 1

{{{
    filename="1.ft"
    prefix="${filename%.*}"
    echo "$prefix"
}}}
== meta skill ==
=== dynamic var name ===
{{{
b=a
a=1
echo ${!b}
}}}
this will display 1, this mean metaprogramming, code generation.

=== command string ===
run a command stored in string.

`eval "$command"`


= 检查命令存在与否 =
一个可能的场景,是一个命令可能有多个.例如make/colormake之类,那么需要检查其中的命令是否存在,从而尽可能选择更合适的命令.

那么可以通过两种方法检查

例如:
{{{
nudate() {
    if hash gdate 2>/dev/null; then
        gdate "$@"
    else
        date "$@"
    fi
}
}}}

第二种是利用command -v CMDNAME
或者 type CMDNAME

在bash中,type和hash是内置的.前者主要检查命令,后者主要检查内置命令以及关键词.

对于POSIX脚本,则使用command -v这种方式
ref::[[http://stackoverflow.com/questions/592620/how-to-check-if-a-program-exists-from-a-bash-script]]
= '' vs "" =
""/''

!!! 这是一个不容易注意的一个小细节.

shell&perl中对于""中等内容,进行变量替换.

但是对于''中内容,则直接赋值,不会进行变量替换工作.

因此在一般情况下,使用最可能的是"".

= arithmetic =
((  )), and *let*, constructs return an *exit status*, 

`z=$((z+3))`

also support hexadecmal with 0x prefix

{{{
    printf "%#x\n" $((0xa + 0xb))
    0x15
}}}

= shell comparation =

* zsh and bash handle `complete` different. zsh could not support this directly.

* zsh handle for space delemiter string is error.

* zsh will initiative expand asterisk symbol self first, so when faild, maybe whole command will stop.

`ls /usr/*/pythonabc* /usr/*/lib/python* 2>/dev/null`

using `noglob`, will prevent zsh to expand asterisk, for example: `noglob echo 2*3 | bc`

but `ls` still fail

----

= sh vs bash? =
sh is specification of POSIX, not a implemetion.

- default ubuntu and debian, sh is _dash_
- busybox use _ash_
- OSX use _zsh_
- BSD use _pdksh_

== different points between shell ==
[[http://unix.stackexchange.com/questions/158896/where-are-zsh-and-mksh-incompatible-with-bash]]

=== conditianal expression ===
- double bracket syntax
TODO:
mksh also support it. but it seems doesn't work at Android-M platform.

== export source ==
export to make it work in child-shell

source to make it work in parent-shell

and DOT is only for sh, and bash compatable with sh

export -f FuncName
export Varname

XXX: can not export array Var
== gotchas ==

* assign reserved words or chars to var name.
* using a hyphen or other reserved char name.
only use _ in var or function name.
* using same name for a var and a function.
* using whitespace inappropriately.
In bash, you have to using whitespace exactly.
for var init, not using whitespace, other issue, add whitespace.
* add semicolon ; for the final command in code block.
or bash can not detect EOF.
* uninit var will get blank string default.
using set -u or set -o nounset to defend this BUG.
* = -eq, different meaning
= is for string compare, while -eq for number.
* string compare
> < for redirect stdin or stdout
\< \> is for string compare.
-gt -lt is for number.
* using let for var assign
let is only for number arithmetic operations on var.
* var with [], need to be quoted with ""
* quoting a var containg whitespace prevents auto spliting.
* commands will faild to execute when script runner lacks permissions.
* DONOT using - as a redirection operator.
* exit staus of an arithmetic not equivalent to an errorcode.
* using DOS-stype \r\n will fail to execute
dos2unix to transfer it.
* not push whitespace in front of termiating limit string of a here document.
here document will introduce when next time use it.
* puting more ouput when using echo result as return value.
* not trying using var in a subshell
* piping echo output to a read may produce unexpcted results.
may not quit.
example:
tail -f somefile | grep abc
* not using SUID command, this is dangrous.
* using shell script for CGI maybe problems, as shell var are not typesafe.
shell script is so easy to crack.
SHELLSHOCK.
* bash does not handle double slash // string correctly.

using shellcheck to detect this warnings to write robust bash script.

* add local,readonly decorator (local only can use in a function)
=== readonly ===
- readonly -p display/define readonly var list
- readonly -f display/define readonly function list
- readonly -a display/define readonly array

=== type ===
- -t        function (and output ... is function)

=== declare ===
- -r        readonly
- -p        display property of var
- -a        array
- -f        function (and output function definition)
- -i        int
- -F        function name or its property
- -t        var have trace property
- -x        setting env var
- -A        assoc array, just map
